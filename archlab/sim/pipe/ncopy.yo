                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: 杨艺欣
                            | # ID: 2200017768
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Added iaddq
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# fool yis, jump to Orig if with yis, do nothing otherwise	
0x000: 30fe7403000000000000 | 	irmovq Orig, %r14
0x00a: a0ef                 | 	pushq %r14
0x00c: e0f40000000000000000 | 	jm $0, %rsp    # 0x374
                            | 
0x016: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x020: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x02a: 744a00000000000000   | 	jne NotOne
                            | 
0x033:                      | One: # handle special case: len == 1
0x033: 62ee                 | 	andq %r14, %r14
0x035: e0f00100000000000000 | 	jm $1, %rax
0x03f: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x049: 90                   | 	ret
                            | 
0x04a:                      | NotOne:
0x04a: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x054: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x05e: 748600000000000000   | 	jne NotTwo
                            | 
0x067:                      | Two:
0x067: 62dd                 | 	andq %r13, %r13
0x069: e0f00100000000000000 | 	jm $1, %rax
0x073: 40d60800000000000000 | 	rmmovq %r13, 8(%rsi)
0x07d: 703300000000000000   | 	jmp One
                            | 
0x086:                      | NotTwo:
0x086: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx    # By now, rdx decremented by 9
0x090: 6222                 | 	andq %rdx, %rdx		
0x092: 72eb01000000000000   | 	jl Rem		# goto remainder handling
0x09b: 70b800000000000000   | 	jmp LoopInit
0x0a4:                      | Loop:	
0x0a4: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x0ae: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x0b8:                      | LoopInit:
0x0b8: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x0c2: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0cc: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0d6: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0e0: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x0ea: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x0f4: 50174000000000000000 | 	mrmovq 64(%rdi), %rcx
                            | 
0x0fe: c0f74800000000000000 | 	iaddq $72, %rdi		# update src
                            | 
                            | # write to dst, update count
0x108: 40164000000000000000 | 	rmmovq %rcx, 64(%rsi)
0x112: 6211                 | 	andq %rcx, %rcx		
0x114: e0f00100000000000000 | 	jm $1, %rax		
0x11e:                      | S8:
0x11e: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x128: 6233                 | 	andq %rbx, %rbx
0x12a: e0f00100000000000000 | 	jm $1, %rax		
0x134:                      | S7:
0x134: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x13e: 6288                 | 	andq %r8, %r8
0x140: e0f00100000000000000 | 	jm $1, %rax
0x14a:                      | S6:
0x14a: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x154: 6299                 | 	andq %r9, %r9
0x156: e0f00100000000000000 | 	jm $1, %rax
0x160:                      | S5:
0x160: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x16a: 62aa                 | 	andq %r10, %r10
0x16c: e0f00100000000000000 | 	jm $1, %rax
0x176:                      | S4:
0x176: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x180: 62bb                 | 	andq %r11, %r11
0x182: e0f00100000000000000 | 	jm $1, %rax
0x18c:                      | S3:
0x18c: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x196: 62cc                 | 	andq %r12, %r12
0x198: e0f00100000000000000 | 	jm $1, %rax
0x1a2:                      | S2:
0x1a2: 40d60800000000000000 | 	rmmovq %r13, 8(%rsi)
0x1ac: 62dd                 | 	andq %r13, %r13
0x1ae: e0f00100000000000000 | 	jm $1, %rax
0x1b8:                      | S1:
0x1b8: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x1c2: 62ee                 | 	andq %r14, %r14
0x1c4: e0f00100000000000000 | 	jm $1, %rax
                            | 
0x1ce: c0f64800000000000000 | 	iaddq $72, %rsi		# update dst
0x1d8: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		# update len
0x1e2: 75a400000000000000   | 	jge Loop			# goto Loop:
                            | 
0x1eb:                      | Rem:    # handle remainder
0x1eb: 2025                 | 	rrmovq %rdx, %rbp    # rbp = len
0x1ed: c0f50800000000000000 | 	iaddq $8, %rbp
                            | 	# (9 + rdx) elements remain
                            | 	# switch (rbp) {
                            | 	# case 0:
                            | 	# 	goto One;
                            | 	# case 1:
                            | 	# 	goto Two;
                            | 	# ...
                            | 	# case 7:
                            | 	# 	goto Eight;
                            | 	# }
0x1f7: 6255                 | 	andq %rbp, %rbp
0x1f9: 72d103000000000000   | 	jl Done    # len <= -9, Done
0x202: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x20c: 742c02000000000000   | 	jne NotOne2
                            | 
0x215:                      | One2:
0x215: 62ee                 | 	andq %r14, %r14
0x217: e0f00100000000000000 | 	jm $1, %rax
0x221: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x22b: 90                   | 	ret
                            | 	
0x22c:                      | NotOne2:
0x22c: 30f15f02000000000000 | 	irmovq table, %rcx
                            | 
0x236: 6055                 | 	addq %rbp, %rbp
0x238: 6055                 | 	addq %rbp, %rbp
0x23a: 6055                 | 	addq %rbp, %rbp
                            | 
0x23c: 6051                 | 	addq %rbp, %rcx
0x23e: 50110000000000000000 | 	mrmovq (%rcx), %rcx
0x248: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x252: a01f                 | 	pushq %rcx
0x254: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x25e: 90                   | 	ret
                            | 
0x25f:                      | table:
0x25f: 7403000000000000     | 	.quad L1
0x267: 6b03000000000000     | 	.quad L2
0x26f: 6203000000000000     | 	.quad L3
0x277: 4f03000000000000     | 	.quad L4
0x27f: 3203000000000000     | 	.quad L5
0x287: 0b03000000000000     | 	.quad L6
0x28f: da02000000000000     | 	.quad L7
0x297: 9f02000000000000     | 	.quad L8
                            | 
0x29f:                      | L8:
0x29f: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x2a9: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2b3: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2bd: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x2c7: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx 
0x2d1: 701e01000000000000   | 	jmp S8    # 8 elements remain
0x2da:                      | L7:	
0x2da: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x2e4: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2ee: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2f8: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x302: 703401000000000000   | 	jmp S7
0x30b:                      | L6: 
0x30b: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x315: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x31f: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x329: 704a01000000000000   | 	jmp S6
0x332:                      | L5: 
0x332: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x33c: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x346: 706001000000000000   | 	jmp S5
0x34f:                      | L4: 
0x34f: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x359: 707601000000000000   | 	jmp S4
0x362:                      | L3: 
0x362: 708c01000000000000   | 	jmp S3
0x36b: 70a201000000000000   | L2: jmp S2
0x374:                      | L1:
                            | 
                            | 
0x374:                      | Orig:
0x374: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x376: 71d103000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x37f:                      | OLoop:	
0x37f: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x389: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x393: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x395: 71a803000000000000   | 	jle Npos		# if so, goto Npos:
0x39e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3a8:                      | Npos:	
0x3a8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x3b2: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x3bc: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x3c6: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x3c8: 767f03000000000000   | 	jg OLoop			# if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3d1:                      | Done:
0x3d1: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3d2:                      | End:
                            | #/* $end ncopy-ys */
