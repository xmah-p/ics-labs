                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: 杨艺欣
                            | # ID: 2200017768
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Added iaddq
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header	
0x000: e0f07402000000000000 | 	jm Orig, %rax
0x00a: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x014: 6222                 | 	andq %rdx, %rdx		# len <= 0?
0x016: 726601000000000000   | 	jl Rem		# if so, goto Rem:
0x01f:                      | Loop:	
0x01f: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x029: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x033: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x03d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x047: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x051: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x05b: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x065: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x06f: 50174000000000000000 | 	mrmovq 64(%rdi), %rcx
                            | 
0x079: c0f74800000000000000 | 	iaddq $72, %rdi		# src++
                            | 
0x083: 40164000000000000000 | 	rmmovq %rcx, 64(%rsi)	# ...and store it to dst
0x08d: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x08f: e0f00100000000000000 | 	jm $1, %rax		
0x099:                      | S8:
0x099: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x0a3: 6233                 | 	andq %rbx, %rbx
0x0a5: e0f00100000000000000 | 	jm $1, %rax		
0x0af:                      | S7:
0x0af: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x0b9: 6288                 | 	andq %r8, %r8
0x0bb: e0f00100000000000000 | 	jm $1, %rax
0x0c5:                      | S6:
0x0c5: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x0cf: 6299                 | 	andq %r9, %r9
0x0d1: e0f00100000000000000 | 	jm $1, %rax
0x0db:                      | S5:
0x0db: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x0e5: 62aa                 | 	andq %r10, %r10
0x0e7: e0f00100000000000000 | 	jm $1, %rax
0x0f1:                      | S4:
0x0f1: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0fb: 62bb                 | 	andq %r11, %r11
0x0fd: e0f00100000000000000 | 	jm $1, %rax
0x107:                      | S3:
0x107: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x111: 62cc                 | 	andq %r12, %r12
0x113: e0f00100000000000000 | 	jm $1, %rax
0x11d:                      | S2:
0x11d: 40d60800000000000000 | 	rmmovq %r13, 8(%rsi)
0x127: 62dd                 | 	andq %r13, %r13
0x129: e0f00100000000000000 | 	jm $1, %rax
0x133:                      | S1:
0x133: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x13d: 62ee                 | 	andq %r14, %r14
0x13f: e0f00100000000000000 | 	jm $1, %rax
                            | 
0x149: c0f64800000000000000 | 	iaddq $72, %rsi		# dst++
0x153: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		# len--
0x15d: 751f00000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x166:                      | Rem:
0x166: 2025                 | 	rrmovq %rdx, %rbp
0x168: c0f50800000000000000 | 	iaddq $8, %rbp
                            | 	# (9 + rdx) elements remain
                            | 	# switch (rbp) {
                            | 	# case 0:
                            | 	# 	goto One;
                            | 	# case 1:
                            | 	# 	goto Two;
                            | 	# ...
                            | 	# case 7:
                            | 	# 	goto Eight;
                            | 	# }
0x172: 6255                 | 	andq %rbp, %rbp
0x174: 72cd02000000000000   | 	jl Done    # len <= -9, Done
0x17d: 30f1ec01000000000000 | 	irmovq table, %rcx
                            | 
0x187: 6055                 | 	addq %rbp, %rbp
0x189: 6055                 | 	addq %rbp, %rbp
0x18b: 6055                 | 	addq %rbp, %rbp
                            | 
0x18d: 6051                 | 	addq %rbp, %rcx
0x18f: 50110000000000000000 | 	mrmovq (%rcx), %rcx
0x199: a01f                 | 	pushq %rcx
0x19b: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x1a5: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x1af: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x1b9: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x1c3: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x1cd: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x1d7: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x1e1: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x1eb: 90                   | 	ret
                            | 
0x1ec:                      | table:
0x1ec: 6b02000000000000     | 	.quad L1
0x1f4: 6202000000000000     | 	.quad L2
0x1fc: 5902000000000000     | 	.quad L3
0x204: 5002000000000000     | 	.quad L4
0x20c: 4702000000000000     | 	.quad L5
0x214: 3e02000000000000     | 	.quad L6
0x21c: 3502000000000000     | 	.quad L7
0x224: 2c02000000000000     | 	.quad L8
                            | 
0x22c: 709900000000000000   | L8: jmp S8
0x235: 70af00000000000000   | L7:	jmp S7
0x23e: 70c500000000000000   | L6: jmp S6
0x247: 70db00000000000000   | L5: jmp S5
0x250: 70f100000000000000   | L4: jmp S4
0x259: 700701000000000000   | L3: jmp S3
0x262: 701d01000000000000   | L2: jmp S2
0x26b: 703301000000000000   | L1: jmp S1
                            | 
0x274:                      | Orig:
0x274: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x276: 71cd02000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x27f: 50a70000000000000000 | OLoop:	mrmovq (%rdi), %r10	# read val from src...
0x289: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x293: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x295: 71a802000000000000   | 	jle Npos		# if so, goto Npos:
0x29e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x2a8: 30fa0100000000000000 | Npos:	irmovq $1, %r10
0x2b2: 61a2                 | 	subq %r10, %rdx		# len--
0x2b4: 30fa0800000000000000 | 	irmovq $8, %r10
0x2be: 60a7                 | 	addq %r10, %rdi		# src++
0x2c0: 60a6                 | 	addq %r10, %rsi		# dst++
0x2c2: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x2c4: 767f02000000000000   | 	jg OLoop			# if so, goto Loop:
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2cd:                      | Done:
0x2cd: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2ce:                      | End:
                            | #/* $end ncopy-ys */
