                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: 杨艺欣
                            | # ID: 2200017768
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Added iaddq
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# fool yis, jump to Orig if with yis, do nothing otherwise	
0x000: 30fe7203000000000000 | 	irmovq Orig, %r14
0x00a: a0ef                 | 	pushq %r14
0x00c: e0f40000000000000000 | 	jm $0, %rsp    # 0x374
                            | 
                            | # Special case: len == 1
0x016: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x020: 744a00000000000000   | 	jne NotOne
                            | 
0x029:                      | One: # handle len == 1
0x029: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x033: 62aa                 | 	andq %r10, %r10
0x035: e0f00100000000000000 | 	jm $1, %rax
0x03f: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x049: 90                   | 	ret
                            | 
0x04a:                      | NotOne:
0x04a: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx    # By now, rdx decremented by 9
0x054: 6222                 | 	andq %rdx, %rdx		
0x056: 72a601000000000000   | 	jl Rem		# goto remainder handling
0x05f:                      | Loop:	
0x05f: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x069: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x073: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x07d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x087: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x091: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x09b: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x0a5: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x0af: 50174000000000000000 | 	mrmovq 64(%rdi), %rcx
                            | 
0x0b9: c0f74800000000000000 | 	iaddq $72, %rdi		# update src
                            | 
                            | # write to dst, update count
0x0c3: 40164000000000000000 | 	rmmovq %rcx, 64(%rsi)
0x0cd: 6211                 | 	andq %rcx, %rcx		
0x0cf: e0f00100000000000000 | 	jm $1, %rax		
0x0d9:                      | S8:
0x0d9: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x0e3: 6233                 | 	andq %rbx, %rbx
0x0e5: e0f00100000000000000 | 	jm $1, %rax		
0x0ef:                      | S7:
0x0ef: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x0f9: 6288                 | 	andq %r8, %r8
0x0fb: e0f00100000000000000 | 	jm $1, %rax
0x105:                      | S6:
0x105: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x10f: 6299                 | 	andq %r9, %r9
0x111: e0f00100000000000000 | 	jm $1, %rax
0x11b:                      | S5:
0x11b: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x125: 62aa                 | 	andq %r10, %r10
0x127: e0f00100000000000000 | 	jm $1, %rax
0x131:                      | S4:
0x131: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x13b: 62bb                 | 	andq %r11, %r11
0x13d: e0f00100000000000000 | 	jm $1, %rax
0x147:                      | S3:
0x147: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x151: 62cc                 | 	andq %r12, %r12
0x153: e0f00100000000000000 | 	jm $1, %rax
0x15d:                      | S2:
0x15d: 40d60800000000000000 | 	rmmovq %r13, 8(%rsi)
0x167: 62dd                 | 	andq %r13, %r13
0x169: e0f00100000000000000 | 	jm $1, %rax
0x173:                      | S1:
0x173: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x17d: 62ee                 | 	andq %r14, %r14
0x17f: e0f00100000000000000 | 	jm $1, %rax
                            | 
0x189: c0f64800000000000000 | 	iaddq $72, %rsi		# update dst
0x193: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		# update len
0x19d: 755f00000000000000   | 	jge Loop			# goto Loop:
                            | 
0x1a6:                      | Rem:    # handle remainder
0x1a6: 2025                 | 	rrmovq %rdx, %rbp    # rbp = len
0x1a8: c0f50800000000000000 | 	iaddq $8, %rbp
                            | 	# (9 + rdx) elements remain
                            | 	# switch (rbp) {
                            | 	# case 0:
                            | 	# 	goto One;
                            | 	# case 1:
                            | 	# 	goto Two;
                            | 	# ...
                            | 	# case 7:
                            | 	# 	goto Eight;
                            | 	# }
                            | 	# andq %rbp, %rbp
0x1b2: 72cf03000000000000   | 	jl Done    # len <= -9, Done
0x1bb: 74e501000000000000   | 	jne NotOne2
                            | 
0x1c4:                      | One2:
0x1c4: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x1ce: 62aa                 | 	andq %r10, %r10
0x1d0: e0f00100000000000000 | 	jm $1, %rax
0x1da: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1e4: 90                   | 	ret
                            | 	
0x1e5:                      | NotOne2:
0x1e5: 30f11802000000000000 | 	irmovq table, %rcx
                            | 
0x1ef: 6055                 | 	addq %rbp, %rbp
0x1f1: 6055                 | 	addq %rbp, %rbp
0x1f3: 6055                 | 	addq %rbp, %rbp
                            | 
0x1f5: 6051                 | 	addq %rbp, %rcx
0x1f7: 50110000000000000000 | 	mrmovq (%rcx), %rcx
0x201: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x20b: a01f                 | 	pushq %rcx
0x20d: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
                            | #	mrmovq 16(%rdi), %r12
                            | #	mrmovq 24(%rdi), %r11
                            | #	mrmovq 32(%rdi), %r10
                            | #	mrmovq 40(%rdi), %r9
                            | #	mrmovq 48(%rdi), %r8
                            | #	mrmovq 56(%rdi), %rbx
0x217: 90                   | 	ret
                            | 
0x218:                      | table:
0x218: 6903000000000000     | 	.quad L1
0x220: 6003000000000000     | 	.quad L2
0x228: 4d03000000000000     | 	.quad L3
0x230: 3003000000000000     | 	.quad L4
0x238: 0903000000000000     | 	.quad L5
0x240: d802000000000000     | 	.quad L6
0x248: 9d02000000000000     | 	.quad L7
0x250: 5802000000000000     | 	.quad L8
                            | 
0x258:                      | L8:
0x258: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x262: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x26c: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x276: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x280: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x28a: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx 
0x294: 70d900000000000000   | 	jmp S8    # 8 elements remain
0x29d:                      | L7:	
0x29d: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x2a7: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x2b1: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2bb: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2c5: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x2cf: 70ef00000000000000   | 	jmp S7
0x2d8:                      | L6: 
0x2d8: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x2e2: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x2ec: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2f6: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x300: 700501000000000000   | 	jmp S6
0x309:                      | L5: 
0x309: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x313: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x31d: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x327: 701b01000000000000   | 	jmp S5
0x330:                      | L4: 
0x330: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x33a: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x344: 703101000000000000   | 	jmp S4
0x34d:                      | L3: 
0x34d: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x357: 704701000000000000   | 	jmp S3
0x360: 705d01000000000000   | L2: jmp S2
0x369: 70d900000000000000   | L1: jmp S8
                            | 
0x372:                      | Orig:
0x372: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x374: 71cf03000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x37d:                      | OLoop:	
0x37d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x387: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x391: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x393: 71a603000000000000   | 	jle Npos		# if so, goto Npos:
0x39c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3a6:                      | Npos:	
0x3a6: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x3b0: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x3ba: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x3c4: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x3c6: 767d03000000000000   | 	jg OLoop			# if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3cf:                      | Done:
0x3cf: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3d0:                      | End:
                            | #/* $end ncopy-ys */
