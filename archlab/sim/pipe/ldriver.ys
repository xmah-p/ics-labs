#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name: 杨艺欣
# ID: 2200017768
#
# Describe how and why you modified the baseline code.

# Added iaddq and jm. jm is implemented as **iaddqg**, which only
# performs the addition when CC meets the "g" condition.

# The starting 3 lines are added to fool yis. It jumps to Orig
# (the original code) if is runing with yis, and does nothing otherwise.
# Then, the program handles len==1 as a special case.

# The main loop is unrolled by 9. 
# We decrement len by 9 before entering the loop, and use len<0
# as a jump out condition. 

# Rem section handles the remainder. We use a jump table to reuse the
# lines in the main loop. 
# Before entering the jump table, there is also a special case handling
# for len==1.

# More details are commented in the code below.
# 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# fool yis, jump to Orig if with yis, do nothing otherwise	
	irmovq Orig, %r14
	pushq %r14
	jm $0, %rsp    # 0x374

# Special case: len == 1
	iaddq $-1, %rdx
	jne NotOne

One: # handle len == 1
	mrmovq (%rdi), %r10	
	andq %r10, %r10
	jm $1, %rax
	rmmovq %r10, (%rsi)
	ret

NotOne:
	iaddq $-8, %rdx    # By now, rdx decremented by 9	
	jl Rem		# goto remainder handling
Loop:	
	mrmovq (%rdi), %r14
	mrmovq 8(%rdi), %r13
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %rbx
	mrmovq 64(%rdi), %rcx    # 9-way loop unrolling

	iaddq $72, %rdi		# update src

# write to dst, update count
	rmmovq %rcx, 64(%rsi)
	andq %rcx, %rcx		
	jm $1, %rax		
S8:    # S8~S1 is jump destinations for the jump table
	rmmovq %rbx, 56(%rsi)
	andq %rbx, %rbx
	jm $1, %rax		
S7:
	rmmovq %r8, 48(%rsi)
	andq %r8, %r8
	jm $1, %rax
S6:
	rmmovq %r9, 40(%rsi)
	andq %r9, %r9
	jm $1, %rax
S5:
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	jm $1, %rax
S4:
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11
	jm $1, %rax
S3:
	rmmovq %r12, 16(%rsi)
	andq %r12, %r12
	jm $1, %rax
S2:
	rmmovq %r13, 8(%rsi)
	andq %r13, %r13
	jm $1, %rax
S1:
	rmmovq %r14, (%rsi)
	andq %r14, %r14
	jm $1, %rax

	iaddq $72, %rsi		# update dst
	iaddq $-9, %rdx		# update len
	jge Loop			# goto Loop:

Rem:    # handle remainder
	rrmovq %rdx, %rbp    # rbp = len
	iaddq $8, %rbp
	jl Done    # len <= -9 means nothing left. Done.
	jne NotOne2

	# there's (9 + rdx) elements remaining.
	# switch (rbp) {
	# case 0:
	# 	goto One;    
	# case 1:
	# 	goto Two;
	# ...
	# case 7:
	# 	goto Eight;
	# }


One2:    # special case for len == 9k+1
	mrmovq (%rdi), %r10	
	andq %r10, %r10
	jm $1, %rax
	rmmovq %r10, (%rsi)
	ret
	
NotOne2:
	irmovq table, %rcx    # rcx stores the addr. of jump table

	addq %rbp, %rbp
	addq %rbp, %rbp
	addq %rbp, %rbp  

	addq %rbp, %rcx    # dest is (rcx, rbp, 8)

	mrmovq (%rcx), %rcx  # addr. of jump destination
	mrmovq (%rdi), %r14
	pushq %rcx  
	mrmovq 8(%rdi), %r13    # fetch 2 elements in advance
	ret     # jump

table:
	.quad L1
	.quad L2
	.quad L3
	.quad L4
	.quad L5
	.quad L6
	.quad L7
	.quad L8

L8:    # 8 elements remaining
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %rbx 
	jmp S8    
L7:	
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r8
	jmp S7
L6: 
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r9
	jmp S6
L5: 
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r10
	jmp S5
L4: 
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	jmp S4
L3: 
	mrmovq 16(%rdi), %r12
	jmp S3
L2: jmp S2
L1: jmp S1    # not used

# Original code. Not used when running without yis.
Orig:
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:

OLoop:	
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:	
	iaddq $-1, %rdx		# len--
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
	andq %rdx,%rdx		# len > 0?
	jg OLoop			# if so, goto Loop:



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad 4
	.quad -5
	.quad -6
	.quad 7
	.quad -8
	.quad 9
	.quad 10
	.quad -11
	.quad 12
	.quad 13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad -18
	.quad 19
	.quad 20
	.quad -21
	.quad -22
	.quad -23
	.quad 24
	.quad 25
	.quad 26
	.quad -27
	.quad 28
	.quad -29
	.quad -30
	.quad 31
	.quad -32
	.quad -33
	.quad 34
	.quad 35
	.quad 36
	.quad -37
	.quad -38
	.quad -39
	.quad 40
	.quad 41
	.quad 42
	.quad -43
	.quad 44
	.quad -45
	.quad -46
	.quad -47
	.quad -48
	.quad -49
	.quad -50
	.quad 51
	.quad -52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad 57
	.quad -58
	.quad 59
	.quad 60
	.quad -61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
