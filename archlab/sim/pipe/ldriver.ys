#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name: 杨艺欣
# ID: 2200017768
#
# Describe how and why you modified the baseline code.
# Added iaddq
# 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header	
	irmovq Orig, %r14
	pushq %r14
	jm $0, %rsp

	iaddq $-1, %rdx
	jne NotOne

One:
	mrmovq (%rdi), %r10	
	andq %r10, %r10
	jm $1, %rax
	rmmovq %r10, (%rsi)
	ret

NotOne:
	iaddq $-8, %rdx
	andq %rdx, %rdx		# len <= 0?
	jl Rem		# if so, goto Rem:
Loop:	
	mrmovq (%rdi), %r14
	mrmovq 8(%rdi), %r13
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %rbx
	mrmovq 64(%rdi), %rcx

	iaddq $72, %rdi		# src++

	rmmovq %rcx, 64(%rsi)	# ...and store it to dst
	andq %rcx, %rcx		# val <= 0?
	jm $1, %rax		
S8:
	rmmovq %rbx, 56(%rsi)
	andq %rbx, %rbx
	jm $1, %rax		
S7:
	rmmovq %r8, 48(%rsi)
	andq %r8, %r8
	jm $1, %rax
S6:
	rmmovq %r9, 40(%rsi)
	andq %r9, %r9
	jm $1, %rax
S5:
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	jm $1, %rax
S4:
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11
	jm $1, %rax
S3:
	rmmovq %r12, 16(%rsi)
	andq %r12, %r12
	jm $1, %rax
S2:
	rmmovq %r13, 8(%rsi)
	andq %r13, %r13
	jm $1, %rax
S1:
	rmmovq %r14, (%rsi)
	andq %r14, %r14
	jm $1, %rax

	iaddq $72, %rsi		# dst++
	iaddq $-9, %rdx		# len--
	jge Loop			# if so, goto Loop:

Rem:
	rrmovq %rdx, %rbp
	iaddq $8, %rbp
	# (9 + rdx) elements remain
	# switch (rbp) {
	# case 0:
	# 	goto One;
	# case 1:
	# 	goto Two;
	# ...
	# case 7:
	# 	goto Eight;
	# }
	andq %rbp, %rbp
	jl Done    # len <= -9, Done
	irmovq table, %rcx

	addq %rbp, %rbp
	addq %rbp, %rbp
	addq %rbp, %rbp

	addq %rbp, %rcx
	mrmovq (%rcx), %rcx
	pushq %rcx
	mrmovq (%rdi), %r14
	mrmovq 8(%rdi), %r13
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r10
	mrmovq 40(%rdi), %r9
	mrmovq 48(%rdi), %r8
	mrmovq 56(%rdi), %rbx
	ret

table:
	.quad L1
	.quad L2
	.quad L3
	.quad L4
	.quad L5
	.quad L6
	.quad L7
	.quad L8

L8: jmp S8
L7:	jmp S7
L6: jmp S6
L5: jmp S5
L4: jmp S4
L3: jmp S3
L2: jmp S2
L1: jmp S1



Orig:
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if so, goto Done:

OLoop:	
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:	
	iaddq $-1, %rdx		# len--
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
	andq %rdx,%rdx		# len > 0?
	jg OLoop			# if so, goto Loop:



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad -5
	.quad 6
	.quad 7
	.quad -8
	.quad 9
	.quad 10
	.quad -11
	.quad -12
	.quad 13
	.quad -14
	.quad -15
	.quad 16
	.quad 17
	.quad 18
	.quad -19
	.quad 20
	.quad -21
	.quad 22
	.quad 23
	.quad 24
	.quad 25
	.quad -26
	.quad 27
	.quad -28
	.quad -29
	.quad 30
	.quad -31
	.quad 32
	.quad 33
	.quad 34
	.quad 35
	.quad -36
	.quad 37
	.quad -38
	.quad -39
	.quad 40
	.quad 41
	.quad -42
	.quad 43
	.quad -44
	.quad -45
	.quad 46
	.quad 47
	.quad 48
	.quad -49
	.quad -50
	.quad 51
	.quad 52
	.quad -53
	.quad -54
	.quad -55
	.quad -56
	.quad -57
	.quad 58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
