                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f67803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f74803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: 杨艺欣
                            | # ID: 2200017768
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Added iaddq
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header	
0x032: 30fee602000000000000 | 	irmovq Orig, %r14
0x03c: a0ef                 | 	pushq %r14
0x03e: e0f40000000000000000 | 	jm $0, %rsp
                            | 
0x048: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x052: 747c00000000000000   | 	jne NotOne
                            | 
0x05b:                      | One:
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x065: 62aa                 | 	andq %r10, %r10
0x067: e0f00100000000000000 | 	jm $1, %rax
0x071: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x07b: 90                   | 	ret
                            | 
0x07c:                      | NotOne:
0x07c: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x086: 6222                 | 	andq %rdx, %rdx		# len <= 0?
0x088: 72d801000000000000   | 	jl Rem		# if so, goto Rem:
0x091:                      | Loop:	
0x091: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x09b: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x0a5: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x0af: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0b9: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0c3: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0cd: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x0d7: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x0e1: 50174000000000000000 | 	mrmovq 64(%rdi), %rcx
                            | 
0x0eb: c0f74800000000000000 | 	iaddq $72, %rdi		# src++
                            | 
0x0f5: 40164000000000000000 | 	rmmovq %rcx, 64(%rsi)	# ...and store it to dst
0x0ff: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x101: e0f00100000000000000 | 	jm $1, %rax		
0x10b:                      | S8:
0x10b: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x115: 6233                 | 	andq %rbx, %rbx
0x117: e0f00100000000000000 | 	jm $1, %rax		
0x121:                      | S7:
0x121: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x12b: 6288                 | 	andq %r8, %r8
0x12d: e0f00100000000000000 | 	jm $1, %rax
0x137:                      | S6:
0x137: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x141: 6299                 | 	andq %r9, %r9
0x143: e0f00100000000000000 | 	jm $1, %rax
0x14d:                      | S5:
0x14d: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x157: 62aa                 | 	andq %r10, %r10
0x159: e0f00100000000000000 | 	jm $1, %rax
0x163:                      | S4:
0x163: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x16d: 62bb                 | 	andq %r11, %r11
0x16f: e0f00100000000000000 | 	jm $1, %rax
0x179:                      | S3:
0x179: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x183: 62cc                 | 	andq %r12, %r12
0x185: e0f00100000000000000 | 	jm $1, %rax
0x18f:                      | S2:
0x18f: 40d60800000000000000 | 	rmmovq %r13, 8(%rsi)
0x199: 62dd                 | 	andq %r13, %r13
0x19b: e0f00100000000000000 | 	jm $1, %rax
0x1a5:                      | S1:
0x1a5: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x1af: 62ee                 | 	andq %r14, %r14
0x1b1: e0f00100000000000000 | 	jm $1, %rax
                            | 
0x1bb: c0f64800000000000000 | 	iaddq $72, %rsi		# dst++
0x1c5: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		# len--
0x1cf: 759100000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x1d8:                      | Rem:
0x1d8: 2025                 | 	rrmovq %rdx, %rbp
0x1da: c0f50800000000000000 | 	iaddq $8, %rbp
                            | 	# (9 + rdx) elements remain
                            | 	# switch (rbp) {
                            | 	# case 0:
                            | 	# 	goto One;
                            | 	# case 1:
                            | 	# 	goto Two;
                            | 	# ...
                            | 	# case 7:
                            | 	# 	goto Eight;
                            | 	# }
0x1e4: 6255                 | 	andq %rbp, %rbp
0x1e6: 724303000000000000   | 	jl Done    # len <= -9, Done
0x1ef: 30f15e02000000000000 | 	irmovq table, %rcx
                            | 
0x1f9: 6055                 | 	addq %rbp, %rbp
0x1fb: 6055                 | 	addq %rbp, %rbp
0x1fd: 6055                 | 	addq %rbp, %rbp
                            | 
0x1ff: 6051                 | 	addq %rbp, %rcx
0x201: 50110000000000000000 | 	mrmovq (%rcx), %rcx
0x20b: a01f                 | 	pushq %rcx
0x20d: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x217: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x221: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x22b: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x235: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x23f: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x249: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x253: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x25d: 90                   | 	ret
                            | 
0x25e:                      | table:
0x25e: dd02000000000000     | 	.quad L1
0x266: d402000000000000     | 	.quad L2
0x26e: cb02000000000000     | 	.quad L3
0x276: c202000000000000     | 	.quad L4
0x27e: b902000000000000     | 	.quad L5
0x286: b002000000000000     | 	.quad L6
0x28e: a702000000000000     | 	.quad L7
0x296: 9e02000000000000     | 	.quad L8
                            | 
0x29e: 700b01000000000000   | L8: jmp S8
0x2a7: 702101000000000000   | L7:	jmp S7
0x2b0: 703701000000000000   | L6: jmp S6
0x2b9: 704d01000000000000   | L5: jmp S5
0x2c2: 706301000000000000   | L4: jmp S4
0x2cb: 707901000000000000   | L3: jmp S3
0x2d4: 708f01000000000000   | L2: jmp S2
0x2dd: 70a501000000000000   | L1: jmp S1
                            | 
                            | 
                            | 
0x2e6:                      | Orig:
0x2e6: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x2e8: 714303000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x2f1:                      | OLoop:	
0x2f1: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x2fb: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x305: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x307: 711a03000000000000   | 	jle Npos		# if so, goto Npos:
0x310: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x31a:                      | Npos:	
0x31a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x324: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x32e: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x338: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x33a: 76f102000000000000   | 	jg OLoop			# if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x343:                      | Done:
0x343: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x344:                      | End:
                            | #/* $end ncopy-ys */
0x344:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x348:                      | 	.align 8
0x348:                      | src:
0x348: 0100000000000000     | 	.quad 1
0x350: feffffffffffffff     | 	.quad -2
0x358: 0300000000000000     | 	.quad 3
0x360: fcffffffffffffff     | 	.quad -4
0x368: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x370:                      | 	.align 16
0x370:                      | Predest:
0x370: fadebc0000000000     | 	.quad 0xbcdefa
0x378:                      | dest:
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398:                      | Postdest:
0x398: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3a0:                      | .align 8
                            | # Run time stack
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
                            | 
0x420:                      | Stack:
