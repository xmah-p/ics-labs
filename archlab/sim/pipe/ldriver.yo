                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f60806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: 杨艺欣
                            | # ID: 2200017768
                            | #
                            | # Describe how and why you modified the baseline code.
                            | 
                            | # Added iaddq and jm. jm is implemented as **iaddqg**, which only
                            | # performs the addition when CC meets the "g" condition.
                            | 
                            | # The starting 3 lines are added to fool yis. It jumps to Orig
                            | # (the original code) if is runing with yis, and does nothing otherwise.
                            | # Then, the program handles len==1 as a special case.
                            | 
                            | # The main loop is unrolled by 9. 
                            | # We decrement len by 9 before entering the loop, and use len<0
                            | # as a jump out condition. 
                            | 
                            | # Rem section handles the remainder. We use a jump table to reuse the
                            | # lines in the main loop. 
                            | # Before entering the jump table, there is also a special case handling
                            | # for len==1.
                            | 
                            | # More details are commented in the code below.
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# fool yis, jump to Orig if with yis, do nothing otherwise	
0x032: 30fea203000000000000 | 	irmovq Orig, %r14
0x03c: a0ef                 | 	pushq %r14
0x03e: e0f40000000000000000 | 	jm $0, %rsp    # 0x374
                            | 
                            | # Special case: len == 1
0x048: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x052: 747c00000000000000   | 	jne NotOne
                            | 
0x05b:                      | One: # handle len == 1
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x065: 62aa                 | 	andq %r10, %r10
0x067: e0f00100000000000000 | 	jm $1, %rax
0x071: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x07b: 90                   | 	ret
                            | 
0x07c:                      | NotOne:
0x07c: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx    # By now, rdx decremented by 9	
0x086: 72d601000000000000   | 	jl Rem		# goto remainder handling
0x08f:                      | Loop:	
0x08f: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x099: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x0a3: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x0ad: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0b7: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0c1: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0cb: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x0d5: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x0df: 50174000000000000000 | 	mrmovq 64(%rdi), %rcx    # 9-way loop unrolling
                            | 
0x0e9: c0f74800000000000000 | 	iaddq $72, %rdi		# update src
                            | 
                            | # write to dst, update count
0x0f3: 40164000000000000000 | 	rmmovq %rcx, 64(%rsi)
0x0fd: 6211                 | 	andq %rcx, %rcx		
0x0ff: e0f00100000000000000 | 	jm $1, %rax		
0x109:                      | S8:    # S8~S1 is jump destinations for the jump table
0x109: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x113: 6233                 | 	andq %rbx, %rbx
0x115: e0f00100000000000000 | 	jm $1, %rax		
0x11f:                      | S7:
0x11f: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x129: 6288                 | 	andq %r8, %r8
0x12b: e0f00100000000000000 | 	jm $1, %rax
0x135:                      | S6:
0x135: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x13f: 6299                 | 	andq %r9, %r9
0x141: e0f00100000000000000 | 	jm $1, %rax
0x14b:                      | S5:
0x14b: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x155: 62aa                 | 	andq %r10, %r10
0x157: e0f00100000000000000 | 	jm $1, %rax
0x161:                      | S4:
0x161: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x16b: 62bb                 | 	andq %r11, %r11
0x16d: e0f00100000000000000 | 	jm $1, %rax
0x177:                      | S3:
0x177: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x181: 62cc                 | 	andq %r12, %r12
0x183: e0f00100000000000000 | 	jm $1, %rax
0x18d:                      | S2:
0x18d: 40d60800000000000000 | 	rmmovq %r13, 8(%rsi)
0x197: 62dd                 | 	andq %r13, %r13
0x199: e0f00100000000000000 | 	jm $1, %rax
0x1a3:                      | S1:
0x1a3: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x1ad: 62ee                 | 	andq %r14, %r14
0x1af: e0f00100000000000000 | 	jm $1, %rax
                            | 
0x1b9: c0f64800000000000000 | 	iaddq $72, %rsi		# update dst
0x1c3: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		# update len
0x1cd: 758f00000000000000   | 	jge Loop			# goto Loop:
                            | 
0x1d6:                      | Rem:    # handle remainder
0x1d6: 2025                 | 	rrmovq %rdx, %rbp    # rbp = len
0x1d8: c0f50800000000000000 | 	iaddq $8, %rbp
0x1e2: 72ff03000000000000   | 	jl Done    # len <= -9 means nothing left. Done.
0x1eb: 741502000000000000   | 	jne NotOne2
                            | 
                            | 	# there's (9 + rdx) elements remaining.
                            | 	# switch (rbp) {
                            | 	# case 0:
                            | 	# 	goto One;    
                            | 	# case 1:
                            | 	# 	goto Two;
                            | 	# ...
                            | 	# case 7:
                            | 	# 	goto Eight;
                            | 	# }
                            | 
                            | 
0x1f4:                      | One2:    # special case for len == 9k+1
0x1f4: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x1fe: 62aa                 | 	andq %r10, %r10
0x200: e0f00100000000000000 | 	jm $1, %rax
0x20a: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x214: 90                   | 	ret
                            | 	
0x215:                      | NotOne2:
0x215: 30f14802000000000000 | 	irmovq table, %rcx    # rcx stores the addr. of jump table
                            | 
0x21f: 6055                 | 	addq %rbp, %rbp
0x221: 6055                 | 	addq %rbp, %rbp
0x223: 6055                 | 	addq %rbp, %rbp  
                            | 
0x225: 6051                 | 	addq %rbp, %rcx    # dest is (rcx, rbp, 8)
                            | 
0x227: 50110000000000000000 | 	mrmovq (%rcx), %rcx  # addr. of jump destination
0x231: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x23b: a01f                 | 	pushq %rcx  
0x23d: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13    # fetch 2 elements in advance
0x247: 90                   | 	ret     # jump
                            | 
0x248:                      | table:
0x248: 9903000000000000     | 	.quad L1
0x250: 9003000000000000     | 	.quad L2
0x258: 7d03000000000000     | 	.quad L3
0x260: 6003000000000000     | 	.quad L4
0x268: 3903000000000000     | 	.quad L5
0x270: 0803000000000000     | 	.quad L6
0x278: cd02000000000000     | 	.quad L7
0x280: 8802000000000000     | 	.quad L8
                            | 
0x288:                      | L8:    # 8 elements remaining
0x288: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x292: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x29c: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2a6: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2b0: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x2ba: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx 
0x2c4: 700901000000000000   | 	jmp S8    
0x2cd:                      | L7:	
0x2cd: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x2d7: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x2e1: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2eb: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2f5: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x2ff: 701f01000000000000   | 	jmp S7
0x308:                      | L6: 
0x308: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x312: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x31c: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x326: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x330: 703501000000000000   | 	jmp S6
0x339:                      | L5: 
0x339: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x343: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x34d: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x357: 704b01000000000000   | 	jmp S5
0x360:                      | L4: 
0x360: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x36a: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x374: 706101000000000000   | 	jmp S4
0x37d:                      | L3: 
0x37d: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x387: 707701000000000000   | 	jmp S3
0x390: 708d01000000000000   | L2: jmp S2
0x399: 70a301000000000000   | L1: jmp S1    # not used
                            | 
                            | # Original code. Not used when running without yis.
0x3a2:                      | Orig:
0x3a2: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x3a4: 71ff03000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x3ad:                      | OLoop:	
0x3ad: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x3b7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x3c1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x3c3: 71d603000000000000   | 	jle Npos		# if so, goto Npos:
0x3cc: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3d6:                      | Npos:	
0x3d6: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x3e0: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x3ea: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x3f4: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x3f6: 76ad03000000000000   | 	jg OLoop			# if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3ff:                      | Done:
0x3ff: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x400:                      | End:
                            | #/* $end ncopy-ys */
0x400:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x400:                      | 	.align 8
0x400:                      | src:
0x400: ffffffffffffffff     | 	.quad -1
0x408: feffffffffffffff     | 	.quad -2
0x410: fdffffffffffffff     | 	.quad -3
0x418: 0400000000000000     | 	.quad 4
0x420: fbffffffffffffff     | 	.quad -5
0x428: faffffffffffffff     | 	.quad -6
0x430: 0700000000000000     | 	.quad 7
0x438: f8ffffffffffffff     | 	.quad -8
0x440: 0900000000000000     | 	.quad 9
0x448: 0a00000000000000     | 	.quad 10
0x450: f5ffffffffffffff     | 	.quad -11
0x458: 0c00000000000000     | 	.quad 12
0x460: 0d00000000000000     | 	.quad 13
0x468: f2ffffffffffffff     | 	.quad -14
0x470: f1ffffffffffffff     | 	.quad -15
0x478: f0ffffffffffffff     | 	.quad -16
0x480: 1100000000000000     | 	.quad 17
0x488: eeffffffffffffff     | 	.quad -18
0x490: 1300000000000000     | 	.quad 19
0x498: 1400000000000000     | 	.quad 20
0x4a0: ebffffffffffffff     | 	.quad -21
0x4a8: eaffffffffffffff     | 	.quad -22
0x4b0: e9ffffffffffffff     | 	.quad -23
0x4b8: 1800000000000000     | 	.quad 24
0x4c0: 1900000000000000     | 	.quad 25
0x4c8: 1a00000000000000     | 	.quad 26
0x4d0: e5ffffffffffffff     | 	.quad -27
0x4d8: 1c00000000000000     | 	.quad 28
0x4e0: e3ffffffffffffff     | 	.quad -29
0x4e8: e2ffffffffffffff     | 	.quad -30
0x4f0: 1f00000000000000     | 	.quad 31
0x4f8: e0ffffffffffffff     | 	.quad -32
0x500: dfffffffffffffff     | 	.quad -33
0x508: 2200000000000000     | 	.quad 34
0x510: 2300000000000000     | 	.quad 35
0x518: 2400000000000000     | 	.quad 36
0x520: dbffffffffffffff     | 	.quad -37
0x528: daffffffffffffff     | 	.quad -38
0x530: d9ffffffffffffff     | 	.quad -39
0x538: 2800000000000000     | 	.quad 40
0x540: 2900000000000000     | 	.quad 41
0x548: 2a00000000000000     | 	.quad 42
0x550: d5ffffffffffffff     | 	.quad -43
0x558: 2c00000000000000     | 	.quad 44
0x560: d3ffffffffffffff     | 	.quad -45
0x568: d2ffffffffffffff     | 	.quad -46
0x570: d1ffffffffffffff     | 	.quad -47
0x578: d0ffffffffffffff     | 	.quad -48
0x580: cfffffffffffffff     | 	.quad -49
0x588: ceffffffffffffff     | 	.quad -50
0x590: 3300000000000000     | 	.quad 51
0x598: ccffffffffffffff     | 	.quad -52
0x5a0: 3500000000000000     | 	.quad 53
0x5a8: 3600000000000000     | 	.quad 54
0x5b0: 3700000000000000     | 	.quad 55
0x5b8: 3800000000000000     | 	.quad 56
0x5c0: 3900000000000000     | 	.quad 57
0x5c8: c6ffffffffffffff     | 	.quad -58
0x5d0: 3b00000000000000     | 	.quad 59
0x5d8: 3c00000000000000     | 	.quad 60
0x5e0: c3ffffffffffffff     | 	.quad -61
0x5e8: 3e00000000000000     | 	.quad 62
0x5f0: 3f00000000000000     | 	.quad 63
0x5f8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x600:                      | 	.align 16
0x600:                      | Predest:
0x600: fadebc0000000000     | 	.quad 0xbcdefa
0x608:                      | dest:
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800:                      | Postdest:
0x800: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x808:                      | .align 8
                            | # Run time stack
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
                            | 
0x888:                      | Stack:
