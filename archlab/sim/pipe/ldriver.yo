                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f70804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: 杨艺欣
                            | # ID: 2200017768
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Added iaddq
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# fool yis, jump to Orig if with yis, do nothing otherwise	
0x032: 30fea403000000000000 | 	irmovq Orig, %r14
0x03c: a0ef                 | 	pushq %r14
0x03e: e0f40000000000000000 | 	jm $0, %rsp    # 0x374
                            | 
                            | # Special case: len == 1
0x048: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x052: 747c00000000000000   | 	jne NotOne
                            | 
0x05b:                      | One: # handle len == 1
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x065: 62aa                 | 	andq %r10, %r10
0x067: e0f00100000000000000 | 	jm $1, %rax
0x071: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x07b: 90                   | 	ret
                            | 
0x07c:                      | NotOne:
0x07c: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx    # By now, rdx decremented by 9
0x086: 6222                 | 	andq %rdx, %rdx		
0x088: 72d801000000000000   | 	jl Rem		# goto remainder handling
0x091:                      | Loop:	
0x091: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x09b: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
0x0a5: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x0af: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0b9: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0c3: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0cd: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x0d7: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x0e1: 50174000000000000000 | 	mrmovq 64(%rdi), %rcx
                            | 
0x0eb: c0f74800000000000000 | 	iaddq $72, %rdi		# update src
                            | 
                            | # write to dst, update count
0x0f5: 40164000000000000000 | 	rmmovq %rcx, 64(%rsi)
0x0ff: 6211                 | 	andq %rcx, %rcx		
0x101: e0f00100000000000000 | 	jm $1, %rax		
0x10b:                      | S8:
0x10b: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x115: 6233                 | 	andq %rbx, %rbx
0x117: e0f00100000000000000 | 	jm $1, %rax		
0x121:                      | S7:
0x121: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x12b: 6288                 | 	andq %r8, %r8
0x12d: e0f00100000000000000 | 	jm $1, %rax
0x137:                      | S6:
0x137: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x141: 6299                 | 	andq %r9, %r9
0x143: e0f00100000000000000 | 	jm $1, %rax
0x14d:                      | S5:
0x14d: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x157: 62aa                 | 	andq %r10, %r10
0x159: e0f00100000000000000 | 	jm $1, %rax
0x163:                      | S4:
0x163: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x16d: 62bb                 | 	andq %r11, %r11
0x16f: e0f00100000000000000 | 	jm $1, %rax
0x179:                      | S3:
0x179: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)
0x183: 62cc                 | 	andq %r12, %r12
0x185: e0f00100000000000000 | 	jm $1, %rax
0x18f:                      | S2:
0x18f: 40d60800000000000000 | 	rmmovq %r13, 8(%rsi)
0x199: 62dd                 | 	andq %r13, %r13
0x19b: e0f00100000000000000 | 	jm $1, %rax
0x1a5:                      | S1:
0x1a5: 40e60000000000000000 | 	rmmovq %r14, (%rsi)
0x1af: 62ee                 | 	andq %r14, %r14
0x1b1: e0f00100000000000000 | 	jm $1, %rax
                            | 
0x1bb: c0f64800000000000000 | 	iaddq $72, %rsi		# update dst
0x1c5: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx		# update len
0x1cf: 759100000000000000   | 	jge Loop			# goto Loop:
                            | 
0x1d8:                      | Rem:    # handle remainder
0x1d8: 2025                 | 	rrmovq %rdx, %rbp    # rbp = len
0x1da: c0f50800000000000000 | 	iaddq $8, %rbp
                            | 	# (9 + rdx) elements remain
                            | 	# switch (rbp) {
                            | 	# case 0:
                            | 	# 	goto One;
                            | 	# case 1:
                            | 	# 	goto Two;
                            | 	# ...
                            | 	# case 7:
                            | 	# 	goto Eight;
                            | 	# }
                            | 	# andq %rbp, %rbp
0x1e4: 720104000000000000   | 	jl Done    # len <= -9, Done
0x1ed: 741702000000000000   | 	jne NotOne2
                            | 
0x1f6:                      | One2:
0x1f6: 50a70000000000000000 | 	mrmovq (%rdi), %r10	
0x200: 62aa                 | 	andq %r10, %r10
0x202: e0f00100000000000000 | 	jm $1, %rax
0x20c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x216: 90                   | 	ret
                            | 	
0x217:                      | NotOne2:
0x217: 30f14a02000000000000 | 	irmovq table, %rcx
                            | 
0x221: 6055                 | 	addq %rbp, %rbp
0x223: 6055                 | 	addq %rbp, %rbp
0x225: 6055                 | 	addq %rbp, %rbp
                            | 
0x227: 6051                 | 	addq %rbp, %rcx
0x229: 50110000000000000000 | 	mrmovq (%rcx), %rcx
0x233: 50e70000000000000000 | 	mrmovq (%rdi), %r14
0x23d: a01f                 | 	pushq %rcx
0x23f: 50d70800000000000000 | 	mrmovq 8(%rdi), %r13
                            | #	mrmovq 16(%rdi), %r12
                            | #	mrmovq 24(%rdi), %r11
                            | #	mrmovq 32(%rdi), %r10
                            | #	mrmovq 40(%rdi), %r9
                            | #	mrmovq 48(%rdi), %r8
                            | #	mrmovq 56(%rdi), %rbx
0x249: 90                   | 	ret
                            | 
0x24a:                      | table:
0x24a: 9b03000000000000     | 	.quad L1
0x252: 9203000000000000     | 	.quad L2
0x25a: 7f03000000000000     | 	.quad L3
0x262: 6203000000000000     | 	.quad L4
0x26a: 3b03000000000000     | 	.quad L5
0x272: 0a03000000000000     | 	.quad L6
0x27a: cf02000000000000     | 	.quad L7
0x282: 8a02000000000000     | 	.quad L8
                            | 
0x28a:                      | L8:
0x28a: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x294: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x29e: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2a8: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2b2: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x2bc: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx 
0x2c6: 700b01000000000000   | 	jmp S8    # 8 elements remain
0x2cf:                      | L7:	
0x2cf: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x2d9: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x2e3: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2ed: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x2f7: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x301: 702101000000000000   | 	jmp S7
0x30a:                      | L6: 
0x30a: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x314: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x31e: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x328: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x332: 703701000000000000   | 	jmp S6
0x33b:                      | L5: 
0x33b: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x345: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x34f: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x359: 704d01000000000000   | 	jmp S5
0x362:                      | L4: 
0x362: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x36c: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x376: 706301000000000000   | 	jmp S4
0x37f:                      | L3: 
0x37f: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12
0x389: 707901000000000000   | 	jmp S3
0x392: 708f01000000000000   | L2: jmp S2
0x39b: 700b01000000000000   | L1: jmp S8
                            | 
0x3a4:                      | Orig:
0x3a4: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x3a6: 710104000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x3af:                      | OLoop:	
0x3af: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x3b9: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x3c3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x3c5: 71d803000000000000   | 	jle Npos		# if so, goto Npos:
0x3ce: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x3d8:                      | Npos:	
0x3d8: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x3e2: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x3ec: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x3f6: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x3f8: 76af03000000000000   | 	jg OLoop			# if so, goto Loop:
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x401:                      | Done:
0x401: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x402:                      | End:
                            | #/* $end ncopy-ys */
0x402:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x408:                      | 	.align 8
0x408:                      | src:
0x408: 0100000000000000     | 	.quad 1
0x410: feffffffffffffff     | 	.quad -2
0x418: 0300000000000000     | 	.quad 3
0x420: 0400000000000000     | 	.quad 4
0x428: 0500000000000000     | 	.quad 5
0x430: 0600000000000000     | 	.quad 6
0x438: f9ffffffffffffff     | 	.quad -7
0x440: 0800000000000000     | 	.quad 8
0x448: f7ffffffffffffff     | 	.quad -9
0x450: 0a00000000000000     | 	.quad 10
0x458: f5ffffffffffffff     | 	.quad -11
0x460: f4ffffffffffffff     | 	.quad -12
0x468: f3ffffffffffffff     | 	.quad -13
0x470: f2ffffffffffffff     | 	.quad -14
0x478: f1ffffffffffffff     | 	.quad -15
0x480: 1000000000000000     | 	.quad 16
0x488: efffffffffffffff     | 	.quad -17
0x490: 1200000000000000     | 	.quad 18
0x498: 1300000000000000     | 	.quad 19
0x4a0: 1400000000000000     | 	.quad 20
0x4a8: 1500000000000000     | 	.quad 21
0x4b0: eaffffffffffffff     | 	.quad -22
0x4b8: e9ffffffffffffff     | 	.quad -23
0x4c0: 1800000000000000     | 	.quad 24
0x4c8: e7ffffffffffffff     | 	.quad -25
0x4d0: e6ffffffffffffff     | 	.quad -26
0x4d8: 1b00000000000000     | 	.quad 27
0x4e0: e4ffffffffffffff     | 	.quad -28
0x4e8: 1d00000000000000     | 	.quad 29
0x4f0: e2ffffffffffffff     | 	.quad -30
0x4f8: e1ffffffffffffff     | 	.quad -31
0x500: e0ffffffffffffff     | 	.quad -32
0x508: dfffffffffffffff     | 	.quad -33
0x510: 2200000000000000     | 	.quad 34
0x518: 2300000000000000     | 	.quad 35
0x520: 2400000000000000     | 	.quad 36
0x528: dbffffffffffffff     | 	.quad -37
0x530: 2600000000000000     | 	.quad 38
0x538: d9ffffffffffffff     | 	.quad -39
0x540: 2800000000000000     | 	.quad 40
0x548: d7ffffffffffffff     | 	.quad -41
0x550: 2a00000000000000     | 	.quad 42
0x558: d5ffffffffffffff     | 	.quad -43
0x560: d4ffffffffffffff     | 	.quad -44
0x568: d3ffffffffffffff     | 	.quad -45
0x570: 2e00000000000000     | 	.quad 46
0x578: d1ffffffffffffff     | 	.quad -47
0x580: 3000000000000000     | 	.quad 48
0x588: cfffffffffffffff     | 	.quad -49
0x590: 3200000000000000     | 	.quad 50
0x598: 3300000000000000     | 	.quad 51
0x5a0: ccffffffffffffff     | 	.quad -52
0x5a8: cbffffffffffffff     | 	.quad -53
0x5b0: 3600000000000000     | 	.quad 54
0x5b8: c9ffffffffffffff     | 	.quad -55
0x5c0: c8ffffffffffffff     | 	.quad -56
0x5c8: 3900000000000000     | 	.quad 57
0x5d0: 3a00000000000000     | 	.quad 58
0x5d8: c5ffffffffffffff     | 	.quad -59
0x5e0: c4ffffffffffffff     | 	.quad -60
0x5e8: 3d00000000000000     | 	.quad 61
0x5f0: 3e00000000000000     | 	.quad 62
0x5f8: 3f00000000000000     | 	.quad 63
0x600: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x610:                      | 	.align 16
0x610:                      | Predest:
0x610: fadebc0000000000     | 	.quad 0xbcdefa
0x618:                      | dest:
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810:                      | Postdest:
0x810: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x818:                      | .align 8
                            | # Run time stack
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
                            | 
0x898:                      | Stack:
